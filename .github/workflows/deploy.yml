name: Deploy and Optimize Static Site

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛰️ Sincronizar código con órbita principal
        uses: actions/checkout@v4

      - name: 🔧 Armar laboratorio Node (v18)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: ⚗️ Alquimia de assets (minificar HTML/CSS/JS)
        shell: bash
        run: |
          set -euo pipefail
          npm install -g terser clean-css-cli html-minifier-terser

          rm -rf dist
          mkdir -p dist

          # Copia todo menos html/css/js y carpetas de trabajo
          rsync -a . dist/ \
            --exclude='*.html' \
            --exclude='*.css' \
            --exclude='*.js' \
            --exclude='node_modules' \
            --exclude='.git*' \
            --exclude='.github' \
            --exclude='dist'

          # Minificar HTML
          find . -type f -name "*.html" -not -path "./dist/*" -not -path "./.git/*" \
            -exec sh -c 'html-minifier-terser "$1" --collapse-whitespace --remove-comments --minify-css true --minify-js true -o "dist/$1"' _ {} \;

          # Minificar CSS
          find . -type f -name "*.css" -not -path "./dist/*" -not -path "./.git/*" \
            -exec sh -c 'cleancss -o "dist/$1" "$1"' _ {} \;

          # Minificar JS
          find . -type f -name "*.js" -not -path "./dist/*" -not -path "./.git/*" \
            -exec sh -c 'terser "$1" -o "dist/$1" -c -m' _ {} \;

      - name: 📂 Escanear artefactos (dist/)
        shell: bash
        run: |
          set -euo pipefail
          ls -laR dist

      - name: 🔐 Forja de llaves SSH y juramento de confianza
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -euo pipefail
          umask 077
          mkdir -p ~/.ssh

          # Escribir la privada EXACTA del secret (multilínea) sin heredoc
          printf '%s' "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Validar que la privada es correcta (deriva la pública o falla)
          ssh-keygen -y -f ~/.ssh/id_ed25519 > /tmp/derived.pub
          echo -n "Fingerprint: "
          ssh-keygen -lf /tmp/derived.pub

          # Confiar en la host key del servidor (dominio e IP)
          ssh-keyscan -T 5 -H "$SSH_HOST" >> ~/.ssh/known_hosts
          ssh-keyscan -T 5 -H 46.62.216.37 >> ~/.ssh/known_hosts || true
          chmod 644 ~/.ssh/known_hosts

          # Sanity: conexión sin password usando solo esa identidad
          ssh -T \
            -o IdentitiesOnly=yes \
            -o PasswordAuthentication=no \
            -o BatchMode=yes \
            -o ConnectionAttempts=3 \
            -i ~/.ssh/id_ed25519 \
            "$SSH_USER@$SSH_HOST" 'echo OK && whoami'

      - name: 🚀 Teletransportar dist/ al servidor (tar+ssh)
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          set -euo pipefail
          cd dist
          tar -cz . | ssh -T \
            -o IdentitiesOnly=yes \
            -o PasswordAuthentication=no \
            -o BatchMode=yes \
            -o ConnectionAttempts=3 \
            -i ~/.ssh/id_ed25519 \
            "$SSH_USER@$SSH_HOST" \
            "tar -xz -C \"$REMOTE_PATH\""

      - name: 🧰 Enderezar permisos (755/644)
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          set -euo pipefail
          ssh -T \
            -o IdentitiesOnly=yes \
            -o PasswordAuthentication=no \
            -o BatchMode=yes \
            -o ConnectionAttempts=3 \
            -i ~/.ssh/id_ed25519 \
            "$SSH_USER@$SSH_HOST" \
            'find '"\"$REMOTE_PATH\""'' -type d -exec chmod 755 {} \; && \
             find '"\"$REMOTE_PATH\""'' -type f -exec chmod 644 {} \;'

      - name: 🔎 Ojo de halcón: verificación remota final
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          set -euo pipefail
          ssh -T \
            -o IdentitiesOnly=yes \
            -o PasswordAuthentication=no \
            -o BatchMode=yes \
            -o ConnectionAttempts=3 \
            -i ~/.ssh/id_ed25519 \
            "$SSH_USER@$SSH_HOST" \
            'ls -laR '"\"$REMOTE_PATH\""'
