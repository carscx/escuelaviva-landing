name: Deploy and Optimize Static Site

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Descargar el código
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configurar Node.js para usar las herramientas de optimización
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # 3. Instalar herramientas y optimizar archivos
      - name: ⚡ Install Tools & Optimize Files
        run: |
          echo "Installing optimization tools (terser, clean-css, html-minifier)..."
          npm install terser clean-css-cli html-minifier-terser -g

          echo "Creating temporary 'dist' directory..."
          mkdir -p dist

          echo "Copying asset files (images, fonts, etc.)..."
          # Copia todo lo que NO sea html, css, o js. Mantiene la estructura de carpetas.
          rsync -av . ./dist/ --exclude='*.html' --exclude='*.css' --exclude='*.js' --exclude='node_modules' --exclude='.git*' --exclude='.github' --exclude='dist'

          echo "Minifying HTML files..."
          # Busca todos los archivos .html, los minifica y los guarda en 'dist' manteniendo su ruta
          find . -type f -name "*.html" -not -path "./dist/*" -not -path "./.git/*" -exec html-minifier-terser {} --collapse-whitespace --remove-comments --minify-css true --minify-js true -o dist/{} \;

          echo "Minifying CSS files..."
          # Busca todos los archivos .css, los minifica y los guarda en 'dist' manteniendo su ruta
          find . -type f -name "*.css" -not -path "./dist/*" -not -path "./.git/*" -exec sh -c 'cleancss -o "dist/$0" "$0"' {} \;

          echo "Minifying JavaScript files..."
          # Busca todos los archivos .js, los minifica y los guarda en 'dist' manteniendo su ruta
          find . -type f -name "*.js" -not -path "./dist/*" -not -path "./.git/*" -exec sh -c 'terser "$0" -o "dist/$0" -c -m' {} \;

      # 4. (Opcional) Verificar el contenido de la carpeta optimizada
      - name: 🧪 Verify optimized 'dist' folder
        run: |
          echo "Listing contents of optimized 'dist' folder:"
          ls -laR dist

      # 5. Configurar la clave SSH
      - name: ⚙️ Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # 6. Desplegar ÚNICAMENTE la carpeta 'dist'
      # 6. Desplegar y Corregir Permisos
      - name: 🚀 Deploy Files & Fix Permissions
        run: |
          echo "Deploying 'dist' folder to server..."
          cd dist && tar -cz . | ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.REMOTE_PATH }} && tar -xz"

          echo "Fixing permissions on server..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "find ${{ secrets.REMOTE_PATH }} -type d -exec chmod 755 {} \; && find ${{ secrets.REMOTE_PATH }} -type f -exec chmod 644 {} \;"

      # 7. Verificación final en el servidor
      - name: ✅ Verify Final Deployment
        run: |
          echo "Verifying contents of remote directory:"
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "ls -laR ${{ secrets.REMOTE_PATH }}"
